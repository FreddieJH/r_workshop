---
title: "Learning R"
author: "Freddie Heather"
format: revealjs
project:
  output-dir: docs
---

# The basics

## What is R?

```{r}
#| include = FALSE
knitr::opts_chunk$set(
  echo = TRUE, 
  include = TRUE
)
```

-   Programming language
-   Very popular in scientific data analysis

![](images/r-analysis.PNG){.fragment .absolute bottom="100" right="300" width="500" height="300"} ![](images/r-art.PNG){.fragment .absolute bottom="100" right="300" width="500" height="300"} ![](images/r-chess.PNG){.fragment .absolute bottom="100" right="300" width="500" height="300"} ![](images/r-presentation.PNG){.fragment .absolute bottom="100" right="300" width="500" height="300"} ![](images/r-analysis.PNG){.fragment .absolute bottom="100" right="300" width="500" height="300"}

## Error checking with R

-   looking for geographical outliers in 700 fish species {{< video images/video1.webm >}}

## R vs RStudio

::: columns
::: column
::: r-stack
![](images/Rlogo.svg){height="100" fig-align="center"}

![](images/r-capture.PNG){.fragment height="300" fig-align="center"}
:::
:::

::: column
::: r-stack
![](images/RStudio-Logo-Flat.png){height="100" fig-align="center"}

![](images/rstudio-capture.PNG){.fragment height="300" fig-align="center"}
:::
:::

::: column
-   The coding language
-   (think car engine)
-   Download it and **forget about it**
:::

::: column
-   User interface
-   (think car dashboard)
-   **Open this** when you want to code
:::
:::

```{=html}
<style>
.quarto-columns {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-gap: 20px;
}
</style>
```
## Downloading R and RStudio

-   R: [cran.r-project.org](https://cran.r-project.org/)
-   RStudio: [posit.co/download/rstudio-desktop](https://posit.co/download/rstudio-desktop/)

# Let's code!

## Basic commands

::: fragment
```{r}
#| code-line-numbers: "|1,2|3"
#| 
# addition
# numeric output
1 + 3
```
:::

::: fragment
```{r }
# numeric vector (i.e. a series of numbers)
1:5

# or 

c(1,2,3,4,5)

```
:::

::: fragment
```{r}
# Arithmetic on a vector
(1:5)*2
```
:::

------------------------------------------------------------------------

### Objects

-   An "object" can be anything: a number, a word, a plot, an equation, etc.
-   The code to create an object is `<-`

**Task:** Create an object called `x` and make it equal to 5, and then modify `x`.

```{r}
x <- 5
x^2 
```

------------------------------------------------------------------------

A little more complex

```{r}
#| code-line-numbers: "1|2|3"
x <- 3 # make x equal to 3
y <- x*5 # make y equal to 5 times the value of x
z <- y - x # make z equal to the difference between y and x
```

::: fragment
What does `z` equal?

```{r}
z
```
:::

::: fragment
What does `x` equal?

```{r}
x
```
:::

------------------------------------------------------------------------

Not everything is a number

-   instead of a numeric variable, an object may be a "character string" (aka. a word or sentence)

```{r}

# character strings
first_name <- "Freddie"
last_name <- "Heather"
paste("My name is", first_name, last_name)

```

# Starting a new analysis

## R projects

#### The key to organisational sucess

-   Similar to folders on your computers
-   R knows exactly where to look for things

**Task:** Start a new R project - Open RStudio - New Project - New Directory \> New Project - Browse location for location of all R projects - Give a good title for the analysis (e.g. "phd_chapter_1") - avoid spaces and capitals

## Creating reproducible code (a script)

-   File \> New file \> R Script
-   Write anything (e.g. a comment with your name or title on line 1)
-   Save As "analysis.R"

# Packages and functions

## What's a function?

-   Using just `+`, `()` and `/`, calculate the mean of 5, 10, and 3.

::: fragment
```{r }
(5+10+3)/3
```
:::

::: fragment
-   Instead, let's use the `mean()` function to calculate the mean:
:::

::: fragment
```{r }
mean(x = c(5,10,3))
```

-   `mean` is the **function** (always immediately followed by the open-parenthesis)
-   `x` is the **argument** of the function
-   we pass `c(5,10,3)` to the x argument of the function
:::

## Functions

-   somebody wrote the code for the `mean()` function
-   `mean()` is a very simple function, but other functions can be extremely complex
-   Some commonly used functions come readily installed when you install R, others you must download
-   Other functions are stored within packages - **packages are just a collection of functions**

## Packages

-   A very commonly installed package is called `readr`
-   This package contains the very useful function `read_csv()`, which allows us to read in excel data (in comma-separated-value format, .csv)
-   To install and load a package:

```{r}
#install.packages("readr") # once per installation of R
library(readr) # at the top of the script of every analysis that uses it
```

## Reading in data

-   Save your **csv** file into your working directory
-   Read the data into R using the `read_csv()` function

```{r}
read_csv("example_data.csv")
```

## Check the data imported correctly

-   First six rows only

```{r}
fish_size <- read_csv("example_data.csv")
head(fish_size)
```

------------------------------------------------------------------------

-   Using the `glimpse()` function from the `dplyr` package

```{r}
library(dplyr)
glimpse(fish_size)
```

## Next session:

-   Manipulating and cleaning the data
